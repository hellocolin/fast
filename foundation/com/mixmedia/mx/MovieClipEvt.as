/** * @author colin */import mx.utils.Delegate;import com.mixmedia.mx.DisplayObject;import com.mixmedia.mx.KeyEvt;import com.mixmedia.mx.events.Event;import com.mixmedia.mx.events.KeyboardEvent;import com.mixmedia.mx.events.MouseEvent;
class com.mixmedia.mx.MovieClipEvt extends DisplayObject implements IDisplayObject,IFASTEventDispatcher,IEventDispatcher{	private var keyboardEvent:KeyEvt;	private var base:MovieClip;	private var tracker:MovieClip;	private var isMouseOver:Boolean=false;	private var parents:Array;	private var par:MovieClip;	private var i:Number;		public function MovieClipEvt(base:MovieClip,isCheckRollOver:Boolean,isCheckEnterFrame:Boolean,isCheckKeyEvent:Boolean){		isCheckRollOver  = (isCheckRollOver==null)?true:isCheckRollOver;		isCheckEnterFrame= (isCheckEnterFrame==null)?true:isCheckEnterFrame;		this.base = base;				tracker = base.createEmptyMovieClip('_mxmEventTracker', 30500);		tracker.onUnload    = Delegate.create(this,onUnload);		tracker.onMouseDown = Delegate.create(this,onMouseDown);		tracker.onMouseUp   = Delegate.create(this,onMouseUp);		if(isCheckKeyEvent){			keyboardEvent = new KeyEvt();			keyboardEvent.addEventListener(KeyboardEvent.KEY_UP, Delegate.create(this,onKeyUp));			keyboardEvent.addEventListener(KeyboardEvent.KEY_DOWN, Delegate.create(this,onKeyDown));			keyboardEvent.setCurrentTarget(this);		}		if(isCheckRollOver){			tracker.onMouseMove  = Delegate.create(this,onMouseMove);		}		if(isCheckEnterFrame)tracker.onEnterFrame = Delegate.create(this,onEnterFrame);	}	public function getBase() : Object {		return base;	}		private function onEnterFrame() : Void {		dispatchEvent(new Event(this, Event.ENTER_FRAME, base));	}	private function onUnload() : Void {		dispatchEvent(new Event(this, Event.REMOVED_FROM_STAGE,base));	}		private function onMouseDown():Void{		if(base.hitTest(base._parent._xmouse, base._parent._ymouse,true))dispatchEvent(new MouseEvent(this,MouseEvent.MOUSE_DOWN));	}	private function onMouseUp() : Void {		if(base.hitTest(base._parent._xmouse, base._parent._ymouse,true)){			dispatchEvent(new MouseEvent(this,MouseEvent.MOUSE_UP));			dispatchEvent(new MouseEvent(this,MouseEvent.CLICK));		}	}		private function onMouseMove():Void{		var isHit:Boolean = base.hitTest(_root._xmouse, _root._ymouse,true);		if(isHit==isMouseOver)return;		if(isOnScreen()==false){			if(isMouseOver==true)dispatchEvent(new MouseEvent(this,MouseEvent.ROLL_OUT));			isMouseOver = false;			return;		}		dispatchEvent(new MouseEvent(this,(isHit==true)?MouseEvent.ROLL_OVER:MouseEvent.ROLL_OUT));		isMouseOver = isHit;	}	private function isOnScreen():Boolean{		parents = String(base).split(".");		par = base;		for(i=0;i<parents.length;i++){			if(par._alpha== 0 || par._visible==false)return false;			par = par._parent;		}		return true;	}	private function onKeyDown(e:KeyboardEvent):Void{		dispatchEvent(e);	}	private function onKeyUp(e:KeyboardEvent):Void{		dispatchEvent(e);	}}