package {	/**	 * @author colin	 * syntax:	 * scaffold KeyboardEvent:Event[] +rw KEY_UP:String='keyUp' KEY_DOWN:String='keyDown' -r pressedKeys:Array	 */	public class Scaffold {		private var output:String = "";		private var renderAsAS3:Boolean=false;		private var className:String;		private var parentClass:String;		private var interfaces:Array;		private var classConstants : Array;		private var classAttributes : Array;		private var getOnlyAttributes : Array;		private var properties : Array;		private var setOnlyAttributes : Array;		private var privateAttributes : Array;		public function Scaffold(){		}		public function exec(str:String):String{			interfaces    = [];			classConstants = [];			classAttributes = [];			properties=[];			getOnlyAttributes=[];			setOnlyAttributes=[];			privateAttributes=[];			output="";			printf("//%s\n",str);			printf("//generate by scaffold\n");			var para:Array = str.split(" ");						//class string			var classString:String = para.shift();			className   = getClassName(classString);			parentClass = getParentClass(classString);			if(classString.split("[")[1]!=null)interfaces  = classString.split("[")[1].split("]")[0].split(",");			var lastPropertyArray:Array=privateAttributes;			for(var i:int=0;i<para.length;i++){				switch(para[i]){					case('+r'):						lastPropertyArray = classConstants;						break;					case('+rw'):						lastPropertyArray = classAttributes;						break;					case('-r'):						lastPropertyArray = getOnlyAttributes;						break;					case('-rw'):						lastPropertyArray = properties;						break;					case('-w'):						lastPropertyArray = setOnlyAttributes;						break;					case('-'):						lastPropertyArray = privateAttributes;						break;					case('-as3'):						renderAsAS3 = true;						break;					default:						lastPropertyArray.push(para[i]);				}			}			return renderAsAS3?formatAS3():formatAS2();		}		private function formatAS3():String{			printf("package {\n");		//header			printf("public class %s",className);			if(parentClass!=null)printf(" extends %s",parentClass);			if(interfaces.length>0)printf(" implements %s",interfaces.join(","));			printf("{\n");		//declare			var i:int,defaultValue:String;			for(i=0;i<classConstants.length;i++){				defaultValue = getDefaultValue(classConstants[i]);				printf("\tpublic static const %s:%s%s;\n",getPropName(classConstants[i]),getType(classConstants[i]),(defaultValue==null)?"":("="+defaultValue));			}						for(i=0;i<classAttributes.length;i++){				defaultValue = getDefaultValue(classAttributes[i]);				printf("\tpublic static var %s:%s%s;\n",getPropName(classAttributes[i]),getType(classAttributes[i]),(defaultValue==null)?"":("="+defaultValue));			}					for(i=0;i<getOnlyAttributes.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(getOnlyAttributes[i]),getType(getOnlyAttributes[i]));			}			for(i=0;i<properties.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(properties[i]),getType(properties[i]));			}			for(i=0;i<setOnlyAttributes.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(setOnlyAttributes[i]),getType(setOnlyAttributes[i]));			}			for(i=0;i<privateAttributes.length;i++){				printf("\tprivate var %s:%s;\n",getPropName(privateAttributes[i]),getType(privateAttributes[i]));			}			//constructor;			printf("\n");			var props:Array=[];			for(i=0;i<properties.length;i++){				props[i]= getPropName(properties[i])+":"+getType(properties[i])+((getDefaultValue(properties[i])==null)?"":("="+getDefaultValue(properties[i])));			}			printf("\tpublic function %s(%s){\n",className,props.join(","));						//constructor setting property			for(i=0;i<properties.length;i++){				printf("\t\t_%s=%s;\n",getPropName(properties[i]),getPropName(properties[i]));			}			for(i=0;i<privateAttributes.length;i++){				if(getDefaultValue(privateAttributes[i])!=null)printf("\t\t%s=%s;\n",getPropName(privateAttributes[i]),getDefaultValue(privateAttributes[i]));			}			printf("\t}\n");						//getter			for(i=0;i<properties.length;i++){				makeGetter(properties[i]);			}						for(i=0;i<getOnlyAttributes.length;i++){				makeGetter(getOnlyAttributes[i]);			}						//setter			for(i=0;i<properties.length;i++){				makeSetter(properties[i]);			}			for(i=0;i<setOnlyAttributes.length;i++){				makeSetter(setOnlyAttributes[i]);			}						printf("}");			printf("}");			return output;		}		private function formatAS2():String{		//header			printf("class %s",className);			if(parentClass!=null)printf(" extends %s",parentClass);			if(interfaces.length>0)printf(" implements %s",interfaces.join(","));			printf("{\n");		//declare			var i:int,defaultValue:String;			for(i=0;i<classConstants.length;i++){				defaultValue = getDefaultValue(classConstants[i]);				printf("\tpublic static var %s:%s%s;\n",getPropName(classConstants[i]),getType(classConstants[i]),(defaultValue==null)?"":("="+defaultValue));			}						for(i=0;i<classAttributes.length;i++){				defaultValue = getDefaultValue(classAttributes[i]);				printf("\tpublic static var %s:%s%s;\n",getPropName(classAttributes[i]),getType(classAttributes[i]),(defaultValue==null)?"":("="+defaultValue));			}					for(i=0;i<getOnlyAttributes.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(getOnlyAttributes[i]),getType(getOnlyAttributes[i]));			}			for(i=0;i<properties.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(properties[i]),getType(properties[i]));			}			for(i=0;i<setOnlyAttributes.length;i++){				printf("\tprivate var _%s:%s;\n",getPropName(setOnlyAttributes[i]),getType(setOnlyAttributes[i]));			}			for(i=0;i<privateAttributes.length;i++){				printf("\tprivate var %s:%s;\n",getPropName(privateAttributes[i]),getType(privateAttributes[i]));			}			//constructor;			printf("\tpublic function %s(",className);			var props:Array=[];			for(i=0;i<properties.length;i++){				props[i]= getPropName(properties[i])+":"+getType(properties[i]);			}			printf("%s",props.join(","));						printf("){\n");			//constructor setting property			for(i=0;i<properties.length;i++){				printf("\t\t_%s=",getPropName(properties[i]));				if(getDefaultValue(properties[i])!=null)printf("(%s==null)?%s:",getPropName(properties[i]),getDefaultValue(properties[i]));				printf("%s;\n",getPropName(properties[i]));			}			for(i=0;i<privateAttributes.length;i++){				if(getDefaultValue(privateAttributes[i])!=null)printf("\t\t%s=%s;\n",getPropName(privateAttributes[i]),getDefaultValue(privateAttributes[i]));			}			printf("\t}\n");						//getter			for(i=0;i<properties.length;i++){				makeGetter(properties[i]);			}						for(i=0;i<getOnlyAttributes.length;i++){				makeGetter(getOnlyAttributes[i]);			}						//setter			for(i=0;i<properties.length;i++){				makeSetter(properties[i]);			}			for(i=0;i<setOnlyAttributes.length;i++){				makeSetter(setOnlyAttributes[i]);			}						printf("}");			return output;		}		private function makeGetter(str:String):void{			//foo:Bar=xxx			printf("\tpublic function get %s():%s{\n",getPropName(str),getType(str));			printf("\t\treturn _%s;\n",getPropName(str));			printf("\t}\n");					}		private function makeSetter(str:String):void{			//foo:Bar=xxx			var voidString:String = renderAsAS3?'void':'Void';			printf("\tpublic function set %s(%s:%s):%s{\n",getPropName(str),getPropName(str),getType(str),voidString);			printf("\t\t_%s=%s;\n",getPropName(str),getPropName(str));			printf("\t}\n");		}		private function getClassName(str:String):String{			return str.split("[")[0].split(":")[0];		}		private function getParentClass(str:String):String{			return str.split("[")[0].split(":")[1];		}		private function getPropName(str:String):String{			return str.split("=")[0].split(":")[0];		}				private function getDefaultValue(str:String):String{			return str.split("=")[1];		}				private function getType(str:String):String{			var type:String = str.split(":")[1];			type = (type==null)?((renderAsAS3==true)?"*":"Object"):type.split("=")[0];			if((type=='int'||type=='uint') && renderAsAS3==false)type='Number';			return type;		}		private function printf(str:String,...args):String{			var strs:Array = str.split("%s");									for(var i:int = 0;i<strs.length;i++){				if(args[i]!=null)strs[i]+=args[i];			}			output+=strs.join("");			return strs.join("");		}	}}